add_lex                             ＜加法运算符＞  ::= +｜-
multiply_lex                         ＜乘法运算符＞  ::= *｜/
relation_lex                        ＜关系运算符＞  ::=  <｜<=｜>｜>=｜!=｜==
letter_lex                          ＜字母＞   ::= ＿｜a｜．．．｜z｜A｜．．．｜Z
digit_lex                           ＜数字＞   ::= ０｜＜非零数字＞
notZeroDigit_lex                    ＜非零数字＞  ::= １｜．．．｜９
character_lex                       ＜字符＞    ::=  '＜加法运算符＞'｜'＜乘法运算符＞'｜'＜字母＞'｜'＜数字＞'
string_lex                          ＜字符串＞   ::=  "｛十进制编码为32,33,35-126的ASCII字符｝"
 
program_lex                         ＜程序＞    ::= ［＜常量说明＞］［＜变量说明＞］{＜有返回值函数定义＞|＜无返回值函数定义＞}＜主函数＞
constDeclaration_lex                ＜常量说明＞ ::=  const＜常量定义＞;{ const＜常量定义＞;}
constDefinition_lex                 ＜常量定义＞   ::=   int＜标识符＞＝＜整数＞{,＜标识符＞＝＜整数＞}
                                                         | float＜标识符＞＝＜实数＞{,＜标识符＞＝＜实数＞}
                                                         | char＜标识符＞＝＜字符＞{,＜标识符＞＝＜字符＞}
unsignerInt_lex                     ＜无符号整数＞  ::= ＜非零数字＞｛＜数字＞｝
int_lex                             //＜整数＞        ::= ［＋｜－］＜无符号整数＞｜０
									＜整数＞        ::= number
fractionalPart_lex                  ＜小数部分＞    ::= ＜数字＞｛＜数字＞｝｜＜空＞
realNumber_lex                      ＜实数＞        ::= ［＋｜－］＜整数＞[.＜小数部分＞]
identifier_lex                      ＜标识符＞    ::=  ＜字母＞｛＜字母＞｜＜数字＞｝
headDeclaration_lex                 ＜声明头部＞   ::=  int＜标识符＞ |float ＜标识符＞|char＜标识符＞
varDeclaration_lex                  ＜变量说明＞  ::= ＜变量定义＞;{＜变量定义＞;}
varDefinition_lex                   ＜变量定义＞  ::= ＜类型标识符＞(＜标识符＞|＜标识符＞‘[’＜无符号整数＞‘]’){,(＜标识符＞|＜标识符＞‘[’＜无符号整数＞‘]’ )}
enumerableConst_lex                 ＜可枚举常量＞   ::=  ＜整数＞|＜字符＞
typeIdentifier_lex                  ＜类型标识符＞      ::=  int | float | char
funWithReturnDefinition_lex         ＜有返回值函数定义＞  ::=  ＜声明头部＞‘(’＜参数＞‘)’ ‘{’＜复合语句＞‘}’
funWithoutReturnDefinition_lex      ＜无返回值函数定义＞  ::= void＜标识符＞‘(’＜参数＞‘)’‘{’＜复合语句＞‘}’
compound_lex                        ＜复合语句＞   ::=  ［＜常量说明＞］［＜变量说明＞］＜语句列＞
parameter_lex                       ＜参数＞    ::= ＜参数表＞
parameterTable_lex                  ＜参数表＞    ::=  ＜类型标识符＞＜标识符＞{,＜类型标识符＞＜标识符＞}| ＜空＞
mainFun_lex                         ＜主函数＞    ::= void main‘(’‘)’‘{’＜复合语句＞‘}’
expression_lex                      ＜表达式＞    ::= ［＋｜－］＜项＞{＜加法运算符＞＜项＞}
term_lex                            ＜项＞     ::= ＜因子＞{＜乘法运算符＞＜因子＞}
factor_lex                          ＜因子＞    ::= ＜标识符＞
											 ｜＜标识符＞‘[’＜表达式＞‘]’
											 |<标识符>.<标识符>
											 ｜＜有返回值函数调用语句＞   
											  |‘(’＜表达式＞‘)’
						 			   		 ｜＜整数＞
											  |＜实数＞
											  |＜字符＞											  
sentence_lex                        ＜语句＞    ::= ＜条件语句＞
												｜＜循环语句＞
												|＜情况语句＞
											   	| ‘{’＜语句列＞‘}’
												｜＜读语句＞;
												｜＜写语句＞;
												｜＜返回语句＞;
												｜＜赋值语句＞;
												｜＜有返回值函数调用语句＞; 
                                                |＜无返回值函数调用语句＞;
												｜＜空＞;
assignSentence_lex                  ＜赋值语句＞   ::=  ＜标识符＞＝＜表达式＞|＜标识符＞‘[’＜表达式＞‘]’=＜表达式＞
conditionSentence_lex               ＜条件语句＞  ::=  if ‘(’＜条件＞‘)’＜语句＞［else＜语句＞］
condition_lex                       ＜条件＞    ::=  ＜表达式＞＜关系运算符＞＜表达式＞｜＜表达式＞ //表达式为0条件为假，否则为真
loopSentence_lex                    ＜循环语句＞   ::=  while ‘(’＜条件＞‘)’＜语句＞
situationSentence_lex               ＜情况语句＞  ::=  switch ‘(’＜表达式＞‘)’ ‘{’＜情况表＞＜缺省＞ ‘}’
situationTable_lex                  ＜情况表＞   ::=  ＜情况子语句＞{＜情况子语句＞}
situationSubSentence_lex            ＜情况子语句＞  ::=  case＜可枚举常量＞：＜语句＞
default_lex                         ＜缺省＞   ::=  default : ＜语句＞|＜空＞
funWithReturnCall_lex               ＜有返回值函数调用语句＞ ::= ＜标识符＞‘(’＜值参数表＞‘)’
funWithoutReturnCall_lex            ＜无返回值函数调用语句＞ ::= ＜标识符＞‘(’＜值参数表＞‘)’
valueParameterTable_lex             ＜值参数表＞   ::= ＜表达式＞{,＜表达式＞}｜＜空＞
sentenceColumn_lex                  ＜语句列＞   ::= ｛＜语句＞｝
scanf_lex                           ＜读语句＞    ::=  scanf ‘(’＜标识符＞{,＜标识符＞}‘)’
printf_lex                          ＜写语句＞    ::= printf ‘(’ ＜字符串＞,＜表达式＞ ‘)’
													| printf ‘(’＜字符串＞ ‘)’
													| printf ‘(’＜表达式＞‘)’
return_lex                          ＜返回语句＞   ::=  return[‘(’＜表达式＞‘)’] 
 
structDeclaration_lex				<结构体声明>	::=	struct <标识符> '{' <结构体内部变量说明> '}'

/**
char
float
bool
结构体
二维数组
**/